<?php

/**
 * @file
 * A module for declaring Moodle-courses display blocks in Drupal
 *
 * This module allows administrators to define blocks that access specially
 * designed Moodle webservices to display users course listings in Drupal.
 */


/**
 * Implements hook_help().
 */
function laf_courses_display_help($path, $arg) {
  if ($path == 'admin/help#laf_courses_display') {
    return t("A module that diplays a user's Moodle courses in Drupal");
  }
}

/**
 * Implements hook_menu().
 */
function laf_courses_display_menu() {
  $items['admin/config/services/laf_courses_display'] = array(
    'title' => 'Lafayette College Courses Display Configuration',
    'description' => 'Courses block configuration',
    'page callback' => 'laf_courses_display_list',
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/services/laf_courses_display/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/services/laf_courses_display/add_block'] = array(
    'title' => 'Add new courses block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('laf_courses_display_add_form'),
    'type' => MENU_LOCAL_TASK + MENU_CONTEXT_INLINE,
    'weight' => 3,
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/services/laf_courses_display/edit/%'] = array(
    'title' => 'Edit courses block configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('laf_courses_display_edit_form', 5),
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/services/laf_courses_display/delete/%'] = array(
    'title' => 'Delete courses block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('laf_courses_display_delete_form', 5),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Form for deleting an existing block.
 */
function laf_courses_display_delete_form($form, &$form_state, $instance_id) {
  $result = db_query('SELECT settings FROM {laf_courses_display_config} WHERE instanceID = :ID', array(':ID' => $instance_id))->fetch();
  $settings = @unserialize($result->settings);
  $form['laf_courses_display_delete_confirm'] = array(
    '#type' => 'checkbox',
    '#title' => 'Delete ' . $settings['title'] . '?',
    '#description' => 'WARNING: This action cannot be undone!',
  );
  $form['laf_courses_display_delete_instanceID'] = array(
    '#type' => 'value',
    '#value' => $instance_id,
  );
  $form['laf_courses_display_delete_title'] = array(
    '#type' => 'value',
    '#value' => $settings['title'],
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Delete courses block'),
  );
  return $form;
}

/**
 * Submit handler for deleting an existing block.
 */
function laf_courses_display_delete_form_submit($form, &$form_state) {
  $instance_id = $form_state['values']['laf_courses_display_delete_instanceID'];
  $title = 'laf_courses_display_' . $form_state['values']['laf_courses_display_delete_title'] . '_' . $instance_id;
  $num_deleted = db_delete('laf_courses_display_config')
    ->condition('instanceID', $instance_id)
    ->execute();
  $num_deleted = db_delete('block')
    ->condition('delta', $title)
    ->execute();
  $form_state['redirect'] = 'admin/config/services/laf_courses_display';
  drupal_set_message(t('The courses block has been deleted.'));
}


/**
 * Form for editing an existing block.
 */
function laf_courses_display_edit_form($form, &$form_state, $instance_id) {
  $result = db_query("SELECT * FROM {laf_courses_display_config} WHERE instanceID = :ID", array(':ID' => $instance_id))->fetch();
  $settings = @unserialize($result->settings);
  $class = $settings['controllerclass'];
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Courses block title'),
    '#description' => t('Title of the block. This field is unique in the database.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => $settings['title'],
  );
  $form['siteURL'] = array(
    '#type' => 'textfield',
    '#title' => t('Base URL'),
    '#description' => t('The base URL of the Moodle instance for this block.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => $settings['siteURL'],
  );
  $form['webservicetoken'] = array(
    '#type' => 'textfield',
    '#title' => t('Webservice Token'),
    '#description' => t('The token used for authentication to the webservice.'),
    '#size' => 40,
    '#maxlength' => 32,
    '#required' => TRUE,
    '#default_value' => $settings['webservicetoken'],
  );
  $form['functionname'] = array(
    '#type' => 'textfield',
    '#title' => t('Function Name'),
    '#description' => t('The name of the Moodle function to call via the webservice.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => $settings['functionname'],
  );
  $form['usetermcode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use term code in display'),
    '#description' => t('Indicates whether or not to use a term drop down box in the block display.'),
    '#default_value' => $settings['usetermcode'],
  );
  $courseBlock = new $class;
  $additionalSettings = ContentGenerator::call($courseBlock, 'additionalSettings');
  foreach ($additionalSettings as $key => $element) {
    if (!isset($element['#default_value']) && isset($settings[$key])) {
      $additionalSettings[$key]['#default_value'] = $settings[$key];
    }
  }
  $form = array_merge($form, $additionalSettings);
  $form['instanceID'] = array(
    '#type' => 'value',
    '#value' => $instance_id,
  );
  $form['controllerclass'] = array(
    '#type' => 'value',
    '#value' => $class,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );
  return $form;

}

/**
 * Submit handler for edit block form.
 */
function laf_courses_display_edit_form_submit($form, &$form_state) {
  $settings = array();
  foreach ($form_state['values'] as $key => $value) {
    $settings[$key] = $value;
  }
  $serialized = serialize($settings);
  $instance_id = $form_state['values']['instanceID'];

  $rows = db_update('laf_courses_display_config')
    ->fields(array(
      'settings' => $serialized,
    ))
    ->condition('instanceID', $instance_id, '=')
    ->execute();

  $form_state['redirect'] = 'admin/config/services/laf_courses_display';
  drupal_set_message(t('The settings have been saved.'));
}

/**
 * Base configuration page that lists current blocks.
 */
function laf_courses_display_list() {
  $variables = array(
    'header' => array(t('Title'), t('Moodle Site URL'), t('Actions')),
  );

  $block_data = db_query("SELECT instanceID, settings from {laf_courses_display_config}");
  foreach ($block_data->fetchAll() as $record) {
    $settings = @unserialize($record->settings);
    $title = $settings['title'];
    $site_url = $settings['siteURL'];
    $instance_id = $record->instanceID;
    $edit_link = l(t('Edit'), 'admin/config/services/laf_courses_display/edit/' . $instance_id);
    $delete_link = l(t('Delete'), 'admin/config/services/laf_courses_display/delete/' . $instance_id);
    $actions_links = $edit_link . ' ' . $delete_link;
    $variables['rows'][] = array($title, $site_url, $actions_links);
  }
  $html = theme('table', $variables);

  return $html;
}

/**
 * Form builder for add new courses block form.
 */
function laf_courses_display_add_form($form, &$form_state) {
  $classes = module_invoke_all('laf_courses_display_block_class');
  $options = array();
  foreach ($classes as $class) {
    $options[$class] = $class;
  }
  $form['#prefix'] = '<div id="courseBlockForm">';
  $form['#suffix'] = '</div>';
  $form['controllerclass'] = array(
    '#type' => 'select',
    '#title' => t('Controlling Class'),
    '#description' => t('A class implementing the CourseBlockInterface to drive term-code specific functionality. A module can implement hook_laf_courses_display_block_class to declare a file path (containing a class with name equal to the filename minus the .php extension) which will appear as an option.'),
    '#required' => TRUE,
    '#options' => $options,
    '#ajax' => array(
      'callback' => 'laf_courses_display_controllerclass_callback',
      'wrapper' => 'courseBlockForm',
    ),
    '#weight' => -11,
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Courses block title'),
    '#description' => t('Title of the block. This field is unique in the database.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#weight' => -10,
  );
  $form['siteURL'] = array(
    '#type' => 'textfield',
    '#title' => t('Base URL'),
    '#description' => t('The base URL of the Moodle instance for this block.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#weight' => -9,
  );
  $form['webservicetoken'] = array(
    '#type' => 'textfield',
    '#title' => t('Webservice Token'),
    '#description' => t('The token used for authentication to the webservice.'),
    '#size' => 40,
    '#maxlength' => 32,
    '#required' => TRUE,
    '#weight' => -8,
  );
  $form['functionname'] = array(
    '#type' => 'textfield',
    '#title' => t('Function Name'),
    '#description' => t('The name of the Moodle function to call via the webservice.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#weight' => -7,
  );
  $form['usetermcode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use term code in display'),
    '#description' => t('Indicates whether or not to use a term drop down box in the block display.'),
    '#weight' => -6,
  );

  if (!empty($form_state['values']['controllerclass'])) {
    $class = $form_state['values']['controllerclass'];
    $courseBlock = new $class;
    $form = array_merge($form, ContentGenerator::call($courseBlock, 'additionalSettings'));
  }


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
    '#weight' => 100,
  );


  return $form;
}


/**
 * Ajax callback for controller class options.
 */
function laf_courses_display_controllerclass_callback($form, &$form_state) {
  return $form;
}

/**
 * Submit handler for add block form.
 */
function laf_courses_display_add_form_submit($form, $form_state) {
  $settings = array();
  foreach ($form_state['values'] as $key => $value) {
    $settings[$key] = $value;
  }
  $serialized = serialize($settings);
  $instance_id = db_insert('laf_courses_display_config')
    ->fields(array(
      'settings' => $serialized,
    ))
    ->execute();

  $form_state['redirect'] = 'admin/config/services/laf_courses_display';
  drupal_set_message(t('The settings have been saved.'));
}

/**
 * Implements hook_block_info().
 */
function laf_courses_display_block_info() {
  $blocks = array();

  $block_data = db_query("SELECT instanceID, settings from {laf_courses_display_config}");
  foreach ($block_data->fetchAll() as $record) {
    $settings = @unserialize($record->settings);
    $title = $settings['title'];
    $instance_id = $record->instanceID;
    $blocks['laf_courses_display_' . $instance_id] = array(
      'info' => t("Display block for ") . $title . t(" courses"),
      'cache' => DRUPAL_NO_CACHE,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Only for blocks named 'laf_courses_display_*'.
 */
function laf_courses_display_block_view($block_name = '') {
  global $user;

  if (substr($block_name, 0, 20) == 'laf_courses_display_') {

    $offset = strrpos($block_name, '_');
    $offset = $offset - strlen($block_name);
    $instance_id = substr($block_name, $offset + 1);
    $result = db_query("SELECT settings FROM {laf_courses_display_config} WHERE instanceID = :ID", array(':ID' => $instance_id))->fetch();
    $settings = @unserialize($result->settings);
    $uid = $user->uid;
    $user_mail = db_query("SELECT mail FROM {users} WHERE uid = :uid", array(':uid' => $uid))->fetch()->mail;
    $class = $settings['controllerclass'];
    $courseBlock = new $class;

    $request_url = ContentGenerator::formatCurlRequest($instance_id, $user_mail, $settings);
    $formatted = ContentGenerator::getData($instance_id, $uid, $request_url);
    if (!empty($formatted)) {
      $content = ContentGenerator::generateBlockContent($instance_id, $courseBlock, $formatted, $settings, 0);
    }
    else {
      $content = '';
    }

    $title = $settings['title'];

    // Output block content.
    $linkout = l("See More at $title", ContentGenerator::call($courseBlock, 'createSiteLink', $settings), array('attributes' => array('target' => '_blank')));
    $content .= "<div class='see-more'> $linkout </div>";
    $block = array(
      'subject' => $title,
      'content' => $content,
    );

    return $block;
  }
}

/**
 * Ajax callback function.
 */
function ajax_callback_link($form, $form_state) {
  $term_code = $form_state['values']['term-form'];
  $output = ajax_get_content($term_code);
  return $output;
}

/**
 * Helper function for ajax callback to get content.
 */
function ajax_get_content($term_code) {
  global $user;
  $uid = $user->uid;
  $offset = strrpos($term_code, '_');
  $instance_id = substr($term_code, $offset + 1);
  $term_code = substr($term_code, 0, $offset);
  $data = cache_get("laf_courses_display:$instance_id:$uid", 'cache');

  if ($data) {
    $result = db_query("SELECT settings FROM {laf_courses_display_config} WHERE instanceID = :ID", array(':ID' => $instance_id))->fetch();
    $settings = @unserialize($result->settings);
    $class = $settings['controllerclass'];
    $courseBlock = new $class;
    $formatted = $data->data;
    $content = ContentGenerator::generateBlockContent($instance_id, $courseBlock, $formatted, $settings, $term_code);
    return $content;
  }
  else {
    return 'An error has occured. Please reload the page.';
  }
}

/**
 * Strips down to just the links for the selected term.
 */
/**
 * Returns the drop-down term menu.
 */
function get_term_form($form, &$form_state, $links, $default, $instance_id) {
  $options = array();
  foreach ($links as $code => $title) {
    $options[$code . "_" . $instance_id] = $title;
  }
  $default = $default . '_' . $instance_id;
  $form['term-form'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $default,
    '#ajax' => array(
      'callback' => 'ajax_callback_link',
      'wrapper' => 'ajax_content_response_' . $instance_id,
    ),
  );

  return $form;
}

/**
 * Implements hook_laf_courses_display_block_class.
 */
function laf_courses_display_laf_courses_display_block_class() {
  return array("LafayetteCourseBlock", "TermlessCourseBlock");
}
