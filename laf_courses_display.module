<?php

/**
 * @file
 * A module for declaring Moodle-courses display blocks in Drupal
 *
 * This module allows administrators to define blocks that access specially 
 * designed Moodle webservices to display users course listings in Drupal.
 */


/**
 * Implements hook_help(). 
 */
function laf_courses_display_help($path, $arg) {
  if ($path == 'admin/help#laf_courses_display') {
    return t("A module that diplays a user's Moodle courses in Drupal");
  }
}

/**
 * Implements hook_menu().
 */
function laf_courses_display_menu() {
  $items['admin/config/services/laf_courses_display'] = array(
    'title' => 'Lafayette College Courses Display Configuration',
    'description' => 'Courses block configuration',
    'page callback' => 'laf_courses_display_list',
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/services/laf_courses_display/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/services/laf_courses_display/add_block'] = array(
    'title' => 'Add new courses block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('laf_courses_display_add_form'),
    'type' => MENU_LOCAL_TASK + MENU_CONTEXT_INLINE,
    'weight' => 3,
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/services/laf_courses_display/edit/%'] = array(
    'title' => 'Edit courses block configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('laf_courses_display_edit_form', 5),
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/services/laf_courses_display/delete/%'] = array(
    'title' => 'Delete courses block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('laf_courses_display_delete_form', 5),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Form for deleting an existing block.
 */
function laf_courses_display_delete_form($form, &$form_state, $instance_id) {
  $result = db_query('SELECT settings FROM {laf_courses_display_config} WHERE instanceID = :ID', array(':ID' => $instance_id))->fetch();
  $settings = @unserialize($result->settings);
  $form['laf_courses_display_delete_confirm'] = array(
    '#type' => 'checkbox',
    '#title' => 'Delete ' . $settings['title'] . '?',
    '#description' => 'WARNING: This action cannot be undone!',
  );
  $form['laf_courses_display_delete_instanceID'] = array(
    '#type' => 'value',
    '#value' => $instance_id,
  );
  $form['laf_courses_display_delete_title'] = array(
    '#type' => 'value',
    '#value' => $settings['title'],
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Delete courses block'),
  );
  return $form;
}

/**
 * Submit handler for deleting an existing block.
 */
function laf_courses_display_delete_form_submit($form, &$form_state) {
  $instance_id = $form_state['values']['laf_courses_display_delete_instanceID'];
  $title = 'laf_courses_display_' . $form_state['values']['laf_courses_display_delete_title'] . '_' . $instance_id;
  $num_deleted = db_delete('laf_courses_display_config')
    ->condition('instanceID', $instance_id)
    ->execute();
  $num_deleted = db_delete('block')
    ->condition('delta', $title)
    ->execute();
  $form_state['redirect'] = 'admin/config/services/laf_courses_display';
  drupal_set_message(t('The courses block has been deleted.'));
}


/**
 * Form for editing an existing block.
 */
function laf_courses_display_edit_form($form, &$form_state, $instance_id) {
  $result = db_query("SELECT * FROM {laf_courses_display_config} WHERE instanceID = :ID", array(':ID' => $instance_id))->fetch();
  $settings = @unserialize($result->settings);
  $classfile = $settings['controllerclass'];
  require_once(drupal_get_path('module', 'laf_courses_display') . "/classes/CourseBlockInterface.php");
  require_once($classfile);
  $class = substr($classfile, 0, -4);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Courses block title'),
    '#description' => t('Title of the block. This field is unique in the database.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => $settings['title'],
  );
  $form['siteURL'] = array(
    '#type' => 'textfield',
    '#title' => t('Base URL'),
    '#description' => t('The base URL of the Moodle instance for this block.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => $settings['siteURL'],
  );
  $form['webservicetoken'] = array(
    '#type' => 'textfield',
    '#title' => t('Webservice Token'),
    '#description' => t('The token used for authentication to the webservice.'),
    '#size' => 40,
    '#maxlength' => 32,
    '#required' => TRUE,
    '#default_value' => $settings['webservicetoken'],
  );
  $form['functionname'] = array(
    '#type' => 'textfield',
    '#title' => t('Function Name'),
    '#description' => t('The name of the Moodle function to call via the webservice.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => $settings['functionname'],
  );
  $form['usetermcode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use term code in display'),
    '#description' => t('Indicates whether or not to use a term drop down box in the block display.'),
    '#default_value' => $settings['usetermcode'],
  );
  $additionalSettings = $class::additionalSettings();
  foreach ($additionalSettings as $element) {
    if (!isset($element['#default_value']) && isset($settings[$element])) {
      $element['#default_value'] = $settings[$element];
    }
  }
  $form += $additionalSettings;
  $form['instanceID'] = array(
    '#type' => 'value',
    '#value' => $instance_id,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );

  return $form;

}

/**
 * Submit handler for edit block form.
 */
function laf_courses_display_edit_form_submit($form, &$form_state) {
  $settings = array();
  foreach ($form_state['values'] as $key => $value) {
    $settings[$key] = $value;
  }
  $serialized = serialize($settings);
  $instance_id = $form_state['values']['laf_courses_display_edit_instanceID'];

  $rows = db_update('laf_courses_display_config')
  ->fields(array(
      'settings' => $serialized,
  ))
  ->condition('instanceID', $instance_id, '=')
  ->execute();

  $form_state['redirect'] = 'admin/config/services/laf_courses_display';
  drupal_set_message(t('The settings have been saved.'));
}

/**
 * Base configuration page that lists current blocks.
 */
function laf_courses_display_list() {
  $variables = array(
    'header' => array(t('Title'), t('Moodle Site URL'), t('Actions')),
  );

  $block_data = db_query("SELECT instanceID, settings from {laf_courses_display_config}");
  foreach ($block_data->fetchAll() as $record) {
    $settings = @unserialize($record->settings);
    $title = $settings['title'];
    $site_url = $settings['siteURL'];
    $instance_id = $record->instanceID;
    $edit_link = l(t('Edit'), 'admin/config/services/laf_courses_display/edit/' . $instance_id);
    $delete_link = l(t('Delete'), 'admin/config/services/laf_courses_display/delete/' . $instance_id);
    $actions_links = $edit_link . ' ' . $delete_link;
    $variables['rows'][] = array($title, $site_url, $actions_links);
  }
  $html = theme('table', $variables);

  return $html;
}

/**
 * Form builder for add new courses block form.
 */
function laf_courses_display_add_form($form, &$form_state) {
  require_once(drupal_get_path('module', 'laf_courses_display') . "/classes/CourseBlockInterface.php");
  $classes = module_invoke_all('laf_courses_display_block_class');
  $form['controllerclass'] = array(
    '#type' => 'select',
    '#title' => t('Controlling Class'),
    '#description' => t('A class implementing the CourseBlockInterface to drive term-code specific functionality. A module can implement hook_laf_courses_display_block_class to declare a file path (containing a class with name equal to the filename minus the .php extension) which will appear as an option.'),
    '#required' => TRUE,
    '#options' => $classes,
    '#ajax' => array(
      'callback' => 'laf_courses_display_controllerclass_callback',
      'wrapper' => 'additionalsettings',
    ),
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Courses block title'),
    '#description' => t('Title of the block. This field is unique in the database.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['siteURL'] = array(
    '#type' => 'textfield',
    '#title' => t('Base URL'),
    '#description' => t('The base URL of the Moodle instance for this block.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['webservicetoken'] = array(
    '#type' => 'textfield',
    '#title' => t('Webservice Token'),
    '#description' => t('The token used for authentication to the webservice.'),
    '#size' => 40,
    '#maxlength' => 32,
    '#required' => TRUE,
  );
  $form['functionname'] = array(
    '#type' => 'textfield',
    '#title' => t('Function Name'),
    '#description' => t('The name of the Moodle function to call via the webservice.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['usetermcode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use term code in display'),
    '#description' => t('Indicates whether or not to use a term drop down box in the block display.'),
  );
  $form['additionalsettings'] = array(
    '#type' => 'fieldset',
    '#title' => 'Additional Settings',
    '#prefix' => '<div id="additionalsettings">',
    '#suffix' => '</div>',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );

  return $form;

}

/**
 * Ajax callback for controller class options.
 */
function laf_courses_display_controllerclass_callback($form, &$form_state) {
  $classfile = $form_state['values']['controllerclass'];
  require_once($classfile);
  $class = substr($classfile, 0, -4);
  return $class::additionalSettings();
}

/**
 * Submit handler for add block form.
 */
function laf_courses_display_add_form_submit($form, $form_state) {
  $settings = array();
  foreach ($form_state['values'] as $key => $value) {
    $settings[$key] = $value;
  }
  $serialized = serialize($settings);
  $instance_id = db_insert('laf_courses_display_config')
  ->fields(array(
    'settings' => $serialized,
  ))
  ->execute();

  $form_state['redirect'] = 'admin/config/services/laf_courses_display';
  drupal_set_message(t('The settings have been saved.'));
}

/**
 * Implements hook_block_info(). 
 */
function laf_courses_display_block_info() {
  $blocks = array();

  $block_data = db_query("SELECT instanceID, settings from {laf_courses_display_config}");
  foreach ($block_data->fetchAll() as $record) {
    $settings = @unserialize($record->settings);
    $title = $settings['title'];
    $instance_id = $record->instanceID;
    $blocks['laf_courses_display_' . $title . '_' . $instance_id] = array(
      'info' => t("Display block for") . $title . t("courses"),
      'cache' => DRUPAL_NO_CACHE,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_view(). 
 * 
 * Only for blocks named 'laf_courses_display_*'.
 */
function laf_courses_display_block_view($block_name = '') {
  global $user;

  if (substr($block_name, 0, 20) == 'laf_courses_display_') {
    // Do display stuff.
    require_once(drupal_get_path('module', 'laf_courses_display') . '/classes/ContentGenerator.php');
    
    $offset = strrpos($block_name, '_');
    $offset = $offset - strlen($block_name);
    $instance_id = substr($block_name, $offset + 1);
    $result = db_query("SELECT settings FROM {laf_courses_display_config} WHERE instanceID = :ID", array(':ID' => $instance_id))->fetch();
    $settings = @unserialize($result->settings);
    $use_term_code = $settings['usetermcode'];
    $site_url = $settings['siteURL'];
    //$shib_idp = $result->shib_IDP;
    $uid = $user->uid;
    $user_mail = db_query("SELECT mail FROM {users} WHERE uid = :uid", array(':uid' => $uid))->fetch()->mail;
    
    $request_url = ContentGenerator::formatCurlRequest($instance_id, $user_mail, $settings);
    $formatted = ContentGenerator::getData($instance_id, $uid, $request_url);
    
    // Here we need to generate default term code instead of passing 0
    if (!empty($formatted)) {
      $content = generate_block_content($formatted, $instance_id, $use_term_code, 0);
    }
    else {
      $content = '';
    }
    
    $title = $settings['title'];

    $auth_url = str_replace('http://', 'https://', $site_url);

    // Output block content.
    // Generalization needed here.
    $linkout = l("See More at $title", $auth_url . '/alt?providerID=' . $shib_idp . '&target=' . $site_url, array('attributes' => array('target' => '_blank')));
    $content .= "<div class='see-more'> $linkout </div>";
    $block = array(
      'subject' => $title,
      'content' => $content,
    );

    return $block;
  }
}



/**
 * Comparison function for sorting links arrays.
 */
function compare_links_alphabetical($a, $b) {
  // We are given two arrays, and want to compare their 'title' fields.
  return strnatcasecmp($a['title'], $b['title']);
}

/**
 * Generate content to display in block.
 */
function generate_block_content($formatted, $instance_id, $use_term_code, $selected_term) {
  drupal_add_js('misc/ajax.js');
  drupal_add_library('system', 'drupal.ajax');
  drupal_add_library('system', 'jquery.form');

  $js = "jQuery(document).ready(function(){";
  $js .= "jQuery('#dropdown').css('display', 'block');";
  $js .= "});";

  drupal_add_js($js, 'inline');

  // Renderable output.
  $content = '';

  // For default content.
  $variables = array();

  // For inactive content.
  $inactive = array();

  // For all content.
  $links = array();

  // For course terms.
  $drop_links = array();

  // For looping through $links.
  $i = 0;

  // For looping through $drop_links.
  $j = 0;

  // Determine whether to render drop-down menu.
  $drop_down_flag = 0;

  if (!$selected_term) {
    $drop_down_flag = 1;
  }
  // Get link generation information from database.
  $result = db_query("SELECT moodle_site_url, shib_IDP FROM {laf_courses_display_config} WHERE instanceID = :ID", array(':ID' => $instance_id))->fetch();
  $site_url = $result->moodle_site_url;
  $shib_idp = $result->shib_IDP;

  foreach ($formatted as $link_info) {
    $links[$i]['href'] = create_course_link($link_info, $site_url, $shib_idp);
    $links[$i]['title'] = html_entity_decode($link_info['fullname'], ENT_QUOTES);
    $links[$i]['attributes'] = array('target' => '_blank');
    // If there is a term field specified, generate the link string.
    if (!empty($link_info['term'])) {
      $links[$i]['term'] = $link_info['term'];
      $k = 1;
      $test_link = parse_term_code($link_info['term']);
      foreach ($drop_links as $comp_link) {
        $k = 1;
        if (strcmp($test_link, $comp_link['title']) == 0) {
          $k = 0;
          break;
        }
      }
      if ($k == 1) {
        $drop_links[$j]['title'] = $test_link;
        $drop_links[$j]['code'] = $link_info['term'];
        $j = $j + 1;
      }
    }
    // TODO: Fix data problem when only visible course has no term code. Hack fix on line 625
    if ($link_info['visible'] == 1) {
      $variables['links'][] = $links[$i];
    }
    else {
      $inactive['links'][] = $links[$i];
    }
    $i = $i + 1;
  }
  if ($check = !empty($variables)) {
    if ($use_term_code) {
      $variables['links'] = term_select($variables['links'], $selected_term, $drop_links);
      $default_term = array_pop($variables['links']);
    }
    uasort($variables['links'], 'compare_links_alphabetical');
    $variables['attributes'] = array();
    if ($use_term_code == 1 && $drop_down_flag == 1 && !empty($drop_links)) {
      $content .= drupal_render(drupal_get_form('get_term_form', $drop_links, $default_term, $instance_id));
    }
    $content .= "<div id='ajax_content_response_$instance_id' class='item-list'>";
    if ($use_term_code) {
      $term_display = parse_term_code($default_term);
    }
    $content .= theme('links', $variables);
  }
  if (!empty($inactive)) {
    if ($use_term_code) {
      $inactive['links'] = term_select($inactive['links'], $selected_term, $drop_links);
      $default_term = array_pop($inactive['links']);
    }
    uasort($inactive['links'], 'compare_links_alphabetical');
    $inactive['attributes'] = array();
    $inactive_content = theme('links', $inactive);
  }

  // Collapsible div.
  if (!empty($inactive['links'])) {
    $handle = t('Inactive Courses');
    $content .= theme('ctools_collapsible',
      array(
        'handle' => $handle,
        'content' => $inactive_content,
        'collapsed' => TRUE,
      ));
  }
  if ($check) {
    $content .= "</div>";
  }
  return $content;
}


/**
 * Ajax callback function.
 */
function ajax_callback_link($form, $form_state) {
  $term_code = $form_state['values']['term-form'];
  $output = ajax_get_content($term_code);
  return $output;
}

/**
 * Helper function for ajax callback to get content.
 */
function ajax_get_content($term_code) {
  global $user;
  $uid = $user->uid;
  $offset = strrpos($term_code, '_');
  $instance_id = substr($term_code, $offset + 1);
  $term_code = substr($term_code, 0, $offset);
  $result = cache_get("laf_courses_display:$instance_id:$uid", 'cache');
  if ($result) {
    $formatted = $result->data;
    $content = generate_block_content($formatted, $instance_id, 1, $term_code);
    return $content;
  }
  else {
    return 'An error has occured. Please reload the page.';
  }
}

/**
 * Strips down to just the links for the selected term.
 */
function term_select($array, $term_code, $term_array) {
  if ($term_code == 0) {
    // Figure out default term here.
    $terms = array();
    $current_term = calculate_term();
    foreach ($term_array as $term) {
      $terms[] = $term['code'];
    }
    if (in_array($current_term, $terms)) {
      $term_code = $current_term;
    }
    else {
      $terms[] = $current_term;
      sort($terms);
      if ($terms[count($terms) - 1] == $current_term) {
        if (count($terms) != 1) {
          $term_code = $terms[count($terms) - 2];
        }
        else {
          $term_code = $current_term;
        }
      }
      else {
        $term_code = $terms[array_search($current_term, $terms) + 1];
      }
    }
  }

  $return_array = array();
  foreach ($array as $element) {
    if (isset($element['term']) && $element['term'] == $term_code) {
      $return_array[] = $element;
    }
  }
  $return_array[] = $term_code;
  return $return_array;
}

/**
 * Returns the drop-down term menu.
 */
function get_term_form($form, &$form_state, $links, $default, $instance_id) {
  $options = array();
  foreach ($links as $link) {
    $options[$link['code'] . "_" . $instance_id] = $link['title'];
  }
  $default = $default . '_' . $instance_id;
  $form['term-form'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $default,
    '#ajax' => array(
      'callback' => 'ajax_callback_link',
      'wrapper' => 'ajax_content_response_' . $instance_id,
    ),
  );

  return $form;
}

/**
 * Implements hook_laf_courses_display_block_class.
 */
function laf_courses_display_laf_courses_display_block_class() {
  return drupal_get_path('module', 'laf_courses_display') . "/classes/LafayetteCourseBlock.php");
}
